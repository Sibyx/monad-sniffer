name: Build Kernel as .deb packages (SelfHosted)

on:
  workflow_dispatch:
    inputs:
      kver:
        description: "Kernel version"
        default: "6.8.0"
      pkgrel:
        description: "Ubuntu raspi release"
        default: "1028-raspi"
      tagrev:
        description: "Tag number (blank = dev only)"
        default: ""
  push:
    branches: [ master ]
  schedule:
    - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  build:
    runs-on: self-hosted

    outputs:
      kver:     ${{ steps.vars.outputs.KVER }}
      pkgrel:   ${{ steps.vars.outputs.PKGREL }}
      buildno:  ${{ steps.vars.outputs.BUILD_NO }}
      localtag: ${{ steps.vars.outputs.LOCALTAG }}

    env:
      DEFAULT_KVER: 6.8.0
      DEFAULT_PKGREL: 1028-raspi

    steps:
      - uses: actions/checkout@v4

      - id: vars
        name: Set variables
        shell: bash
        run: |
          KVER="${{ github.event.inputs.kver  || env.DEFAULT_KVER }}"
          PKGREL="${{ github.event.inputs.pkgrel || env.DEFAULT_PKGREL }}"
          TAGREV="${{ github.event.inputs.tagrev }}"
          if [[ -n "$TAGREV" ]]; then
            BUILD_NO="$TAGREV"
          else
            BUILD_NO="${{ github.run_number }}"
          fi
          LOCALTAG="-monad.${BUILD_NO}"
          CHANGELOCAL="+monad.${BUILD_NO}"
          FULL="${{ github.event.head_commit.author.name || github.actor }}"
          MAIL="${{ github.event.head_commit.author.email || github.actor }}"
          echo "KVER=$KVER"               >> $GITHUB_OUTPUT
          echo "PKGREL=$PKGREL"           >> $GITHUB_OUTPUT
          echo "BUILD_NO=$BUILD_NO"       >> $GITHUB_OUTPUT
          echo "LOCALTAG=$LOCALTAG"       >> $GITHUB_OUTPUT
          echo "CHANGELOCAL=$CHANGELOCAL" >> $GITHUB_OUTPUT
          echo "DEBFULLNAME=$FULL"        >> $GITHUB_OUTPUT
          echo "DEBEMAIL=$MAIL"           >> $GITHUB_OUTPUT
          echo "BUILDDIR=${RUNNER_TEMP}/kernel-build" >> $GITHUB_OUTPUT

      - name: Export env
        run: |
          echo "DEBFULLNAME=${{ steps.vars.outputs.DEBFULLNAME }}" >> $GITHUB_ENV
          echo "DEBEMAIL=${{ steps.vars.outputs.DEBEMAIL }}"       >> $GITHUB_ENV
          echo "BUILDDIR=${{ steps.vars.outputs.BUILDDIR }}"       >> $GITHUB_ENV
          mkdir -p "${{ steps.vars.outputs.BUILDDIR }}"

      - name: Get source
        run: |
          cd "$BUILDDIR"
          apt source linux-image-${{ steps.vars.outputs.KVER }}-${{ steps.vars.outputs.PKGREL }}

      - name: Prep & config
        run: |
          cd "$BUILDDIR/linux-raspi-${{ steps.vars.outputs.KVER }}"
          fakeroot debian/rules clean
          make ARCH=arm64 mrproper
          fakeroot debian/rules genconfigs
          ./scripts/config --file CONFIGS/arm64-config.flavour.raspi \
            --set-str LOCALVERSION "${{ steps.vars.outputs.LOCALTAG }}" \
            --set-str SYSTEM_TRUSTED_KEYS "" \
            --set-str SYSTEM_REVOCATION_KEYS "" \
            --enable NL80211_TESTMODE \
            --enable CFG80211_DEVELOPER_WARNINGS \
            --enable LIB80211_DEBUG \
            --enable MAC80211_DEBUG_MENU \
            --enable LIBIPW_DEBUG \
            --enable IWLWIFI_DEBUG
          dch --local "${{ steps.vars.outputs.CHANGELOCAL }}" "monad build"
          echo "${{ steps.vars.outputs.LOCALTAG }}" > debian/localversion.monad
          fakeroot debian/rules updateconfigs

      - name: Overlay DTS
        run: |
          cd "$BUILDDIR"
          git clone --depth=1 --branch rpi-6.8.y https://github.com/raspberrypi/linux rpi
          cp -a rpi/arch/arm64/boot/dts/overlays \
             "$BUILDDIR/linux-raspi-${{ steps.vars.outputs.KVER }}/arch/arm64/boot/dts/"
          rm -rf rpi

      - name: Build .debs
        run: |
          cd "$BUILDDIR/linux-raspi-${{ steps.vars.outputs.KVER }}"
          export DEB_BUILD_OPTIONS="parallel=$(nproc)"
          fakeroot debian/rules binary-headers binary-raspi binary-perarch skipdbg=true skipabi=true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debs-kernel-${{ steps.vars.outputs.LOCALTAG }}
          path: ${{ env.BUILDDIR }}/*.deb

      - name: cleanup
        if: always()
        shell: bash
        run: rm -rf "$BUILDDIR"

  publish-dev:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download kernel .deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: debs-kernel-${{ needs.build.outputs.localtag }}

      - name: Create or update “dev” release
        id: devrel
        uses: softprops/action-gh-release@v1
        with:
          tag_name: monad-dev
          name: Monad Dev Build
          body: |
            Automated development kernel build:
            **${{ needs.build.outputs.kver }}-${{ needs.build.outputs.pkgrel }}${{ needs.build.outputs.localtag }}**
          draft: false
          prerelease: true
      - name: Upload .deb assets to dev release
        uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.devrel.outputs.upload_url }}
          files: '*.deb'

  publish-release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tagrev != '' }}
    steps:
      - name: Download kernel .deb artifacts
        uses: actions/download-artifact@v4
        with:
          name: debs-kernel-${{ needs.build.outputs.localtag }}

      - name: Create versioned release
        id: tagrel
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.build.outputs.kver }}-monad.${{ needs.build.outputs.buildno }}
          name: Kernel ${{ needs.build.outputs.kver }}-monad.${{ needs.build.outputs.buildno }}
          body: |
            Official monad release:
            **${{ needs.build.outputs.kver }}-${{ needs.build.outputs.pkgrel }}+monad.${{ needs.build.outputs.buildno }}**
          draft: false
          prerelease: false

      - name: Upload .deb assets to “v${{ needs.build.outputs.kver }}-monad.${{ needs.build.outputs.buildno }}” release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.build.outputs.kver }}-monad.${{ needs.build.outputs.buildno }}
          files: '*.deb'
